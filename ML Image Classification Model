{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ML Image Classification Model","provenance":[],"authorship_tag":"ABX9TyOcl1EiWTeGsVpYXdIBNb/s"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","from sklearn.model_selection import train_test_split\n","from utils import load_galaxy_data\n","\n","import app"],"metadata":{"id":"2iXh4TePh7nC"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bVuap1Evh1T7"},"outputs":[],"source":["input_data, labels = load_galaxy_data()\n","\n","#print the shape of the data\n","print(input_data.shape)\n","print(labels.shape)\n","\n","x_train, x_valid, y_train, y_valid = train_test_split(input_data, labels, test_size=0.2, shuffle=True, random_state=222, stratify=labels)\n","\n","data_generator = ImageDataGenerator(rescale=1./255)\n","batch_size = 5\n","\n","training_iterator = data_generator.flow(x_train, y_train, batch_size=batch_size)\n","test_iterator = data_generator.flow(x_valid, y_valid, batch_size=5)\n","\n","#create model\n","model = tf.keras.Sequential()\n","\n","#add input and output layers\n","model.add(tf.keras.Input(shape=(128,128,3)))\n","model.add(tf.keras.layers.Dense(4, activation='softmax'))\n","\n","#compile model\n","optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)\n","loss = tf.keras.losses.CategoricalCrossentropy()\n","metrics = [tf.keras.metrics.CategoricalAccuracy(), tf.keras.metrics.AUC()]\n","model.compile(optimizer=optimizer, loss=loss, metrics=metrics)\n","\n","#build model architecture\n","model.add(tf.keras.layers.Conv2D(8, 3, strides=2, activation='relu'))\n","model.add(tf.keras.layers.MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n","model.add(tf.keras.layers.Conv2D(8, 3, strides=2, activation='relu'))\n","model.add(tf.keras.layers.MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n","\n","model.add(tf.keras.layers.Flatten())\n","model.add(tf.keras.layers.Dense(16, activation='relu'))\n","model.add(tf.keras.layers.Dense(4, activation='relu'))\n","\n","#check how many paramaters model has\n","print(model.summary())\n","\n","#train model\n","model.compile(optimizer=optimizer, loss=loss, metrics=metrics)\n","model.fit(training_iterator, steps_per_epoch=len(x_train)/5, epochs=8, validation_data=test_iterator, validation_steps=len(x_valid)/5)\n","\n","from visualize import visualize_activations\n","visualize_activations(model,test_iterator)"]}]}